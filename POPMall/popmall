# -*- coding: utf-8 -*-
import selenium
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
#对鼠标的操作
from selenium.webdriver.common.action_chains import ActionChains
#下面2个都是针对隔多长时间，WebDriverWait函数更高级一些
from selenium.webdriver.support.ui import WebDriverWait
import time
import os
if "HTTP_PROXY" in os.environ: del os.environ['HTTP_PROXY']

#打开google浏览器，browser是浏览器返回的一个实例
browser = selenium.webdriver.Chrome()
# 打开开放商城
popmall_path = "http://jyj.b2cex.com/"
browser.get(popmall_path)
# 最大化窗口
browser.maximize_window()
# 点击商城首页页面上右上方的登录按钮
# browser.find_element_by_xpath(".//*[@id='headerLogin']/a").click()
# 通过超链接点击商城首页页面右上方的登录按钮，同样也适用于会员中心，加盟入驻
# browser.find_element_by_link_text("登录").click()
# 点击商城首页右边的登录按钮
browser.find_element_by_xpath(".//*[@id='userLR']/a[1]").click()
# 在登录页面通过id找到用户名输入框，并输入用户名wydqxclzjf
browser.find_element_by_id("loginName").send_keys("wydqxclzjf")
# 在登录页面通过name找到用户密码输入框，并输入密码12345
browser.find_element_by_name("password").send_keys("12345")
# 通过class_name 点击登录按钮
browser.find_element_by_class_name("login-btn").click()
#登录后先清空购物车，首页鼠标移动至页面上方“我的购物车”，在下拉框中点击“去购物车结算”按钮
# WebDriverWait等待最长为10s，默认每0.5秒询问一次,若找到了这个元素则马上执行这个函数，time这个函数是强制等待
#进入所有商品页面
browser.find_element_by_xpath("html/body/div[2]/div[1]/div[2]/div/ul/li[2]/a").click()
shoppingcartbutton = WebDriverWait(browser,10).until(lambda x:x.find_element_by_class_name("my-cart-link"))
#鼠标移动到加入购物车按钮处，且展开商品
ActionChains(browser).move_to_element(shoppingcartbutton).perform()
try:
    go_shoppingcart_statementsbutton = WebDriverWait(browser,4).until(lambda x:x.find_element_by_xpath(".//*[@id='cartListBoxId']/div[2]/a"))
    print("找到了去购物车结算按钮")
    status = True
except:
    status = False
    print("没有找到去购物车结算的按钮，购物车是空的，去所有商品页面将商品加入购物车")

if status:
    print("进入购物车页面，并清空购物车")
    go_shoppingcart_statementsbutton.click()
    browser.execute_script("window.scrollBy(0,10000)")
    WebDriverWait(browser,5).until(lambda x:x.find_element_by_id("clearSc")).click()
    WebDriverWait(browser,5).until(lambda x:x.find_element_by_class_name("ui-button-text")).click()
    time.sleep(1)
    browser.back()

#找到第一页的所有商品单元格，因为接下来的代码中要获取商品的名称、商品id、购物车按钮，所以以单元格的维度进行for循环
#本来class="sowlist2 fix"，但是会报Compound class names not permitted这个错误，意思是复合类名不能做参数，所有只能取其中的一个，sowlist2或者fix
goodCells = browser.find_elements_by_class_name("sowlist2")
print("加入购物车按钮共有 %d 个" % (len(goodCells)))
#获得屏幕的高度
windowheight = browser.get_window_size()['height']
#xpathulnum计算元素的xpath路径，为了遍历商品
xpathulnum = 1
#定义商品ID的数组
goodsIDArray = []
# 将此页的所有商品加入购物车中
for goodCell in goodCells:
    #下面2句是获得单元格的高度，是为了下面的计算，如果元素快超出屏幕了就上滑页面
    goodCellheight = goodCell.size['height']
    print("cellheight = ",goodCellheight)
    #获取加入购物车按钮的绝对位置，这里的关键点是获取元素的相对位置location_once_scrolled_into_view，而不是绝对位置location
    shoppingcart = goodCell.find_element_by_class_name("ask_event-direct-buy")
    locationy = shoppingcart.location_once_scrolled_into_view['y']
    print("locationy = %d  windowheight = %d"%(locationy,windowheight))
    #如果购物车按钮的相对位置+单元格的高度大于屏幕高度的话，说明这个商品接近屏幕底部了，该商品下面的商品肯定超出了屏幕，需要上拉页面使下面被点击的商品展示出来
    if locationy+goodCellheight> windowheight:
        #如果元素超过屏幕就上滑600个像素，差不多是4个单元格的高度，应该也可以将600换成是屏幕高度，每次上滑一屏，自己没有试
        browser.execute_script("window.scrollBy(0,600)")
        #下面这句代码是google上上滑页面的方法，滑动到shoppingcart这个位置，这样的话每个被点击的元素都在屏幕的最上方，体验上没有上面的方法好
        #browser.execute_script("arguments[0].scrollIntoView();", shoppingcart)
    goodnamexpath = ".//*[@id='goodsListContainer']/div[2]/ul[" + str(xpathulnum) + "]""/li/div[2]/div[1]/a/h3"
    #获取商品名称，获取商品名称是为了可以打印出哪些商品加入了购物车，哪些商品不能加入购物车报错了
    goodsname = browser.find_element_by_xpath(goodnamexpath).get_attribute("title")
    #获取商品ID，因为商品的ID在购物车按钮元素处体现，这里获取的商品ID存到一个数组中，方便在购物车中找到这些元素进行购买
    goodsID = shoppingcart.get_attribute("data-id")
    #使用下面2中方法都可以进行元素的点击  execute_script在当前窗口为执行js脚本的意思    execute是期望的意思  script是脚本的意思
    #shoppingcart.click()
    browser.execute_script("arguments[0].click();",shoppingcart)
    #点击加入购物车会报错，下面是获取报错的窗口
    popup = expected_conditions.alert_is_present().__call__(browser)
    if popup:
        print("【%s】%s"%(goodsname,browser.switch_to.alert.text))
        time.sleep(1)
        #点击报错窗口上的确定按钮
        browser.switch_to.alert.accept()
    else:
        print("【%s】加入购物车了,它的ID是【%s】" % (goodsname,goodsID))
        time.sleep(1)
        #将商品的ID存储起来
        goodsIDArray.append(goodsID)
    xpathulnum = xpathulnum + 1

#print("goosIDArray:",goodsIDArray)
#因为购物车按钮在页面上方，所以需要页面滚动到顶部
#js = "var q=document.documentElement.scrollTop=0"
#time.sleep(2)
#browser.execute_script(js)
# 进入购物车查看 不知道为啥不执行点击操作
browser.find_element_by_class_name("my-cart-link").click()
#随机勾选商品（正常、异常已售罄）,接下来做随机更换数量（超过库存，小于库存）
time.sleep(3)
cartgoods = browser.find_elements_by_css_selector('tr[name="goodsId"]')
print("cartgoods 有%d个"%len(cartgoods))
browser.quit()